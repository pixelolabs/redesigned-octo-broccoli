<?php

/**
 * @file
 * Module file for block_content_machine_name.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\block_content\BlockContentInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function block_content_machine_name_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'block_content') {
    $fields['machine_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Machine name'))
      ->setDescription(t('Machine name of the block'))
      ->setRequired(FALSE)
      ->setDisplayConfigurable('form', FALSE)
      ->setTranslatable(FALSE);

    $fields['template_suggestion'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Template suggestion'))
      ->setDescription(t('template suggestion for this block content. i.e. block__test'))
      ->setRequired(FALSE)
      ->setSetting('max_length', 255)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setTranslatable(FALSE);

    return $fields;
  }
}

/**
 * Implements hook_entity_presave().
 */
function block_content_machine_name_entity_presave(EntityInterface $entity) {
  if ($entity instanceof BlockContentInterface) {
    $value = \Drupal::service('transliteration')->transliterate($entity->label(), LanguageInterface::LANGCODE_DEFAULT, '_');
    $new_value = Html::getClass($value);
    $entity->set('machine_name', $new_value);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function block_content_machine_name_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'block_content':
      $block_content = $variables['content']['#block_content'];
      $machine_name = $block_content->get('machine_name')->value;
      $cssclass = 'block-content--' . strtolower($machine_name);
      $variables['attributes']['class'][] = Html::cleanCssIdentifier($cssclass);
      $variables['attributes']['class'][] = 'block-type-block-content';
      break;
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function block_content_machine_name_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add template suggestion based on machine name.
  switch ($variables['elements']['#base_plugin_id']) {
    case 'block_content':
      $block_content = $variables['elements']['content']['#block_content'];
      $machine_name = $block_content->get('machine_name')->value;
      $suggestions[] = 'block__' . $block_content->getEntityTypeId() . '__' . $machine_name;
      $suggestions[] = 'block__' . $block_content->getEntityTypeId() . '__' . $block_content->bundle() . '__' . $machine_name;

      $template_suggestion = $block_content->get('template_suggestion')->value;
      if (!empty($template_suggestion)) {
        $suggestions[] = $template_suggestion;
      }
      break;
  }
}
